class Node:
    def __init__(self, key, value):
        self.key = key
        self.value = value
        self.next = None
        self.prev = None


class HashTable:
    def __init__(self, initial_size=4):
        self.size = initial_size
        self.count = 0
        self.table = [None] * self.size

    def _multiply_hash(self, key):
        A = 0.6180339887  # constant for multiplication method
        return int(self.size * ((key * A) % 1))

    def insert(self, key, value):
        if self.count >= self.size * 0.75:
            self._resize(self.size * 2)

        index = self._multiply_hash(key)
        new_node = Node(key, value)

        if not self.table[index]:
            self.table[index] = new_node
        else:
            temp = self.table[index]
            while temp.next:
                temp = temp.next
            temp.next = new_node
            new_node.prev = temp

        self.count += 1

    def get(self, key):
        index = self._multiply_hash(key)
        temp = self.table[index]

        while temp:
            if temp.key == key:
                return temp.value
            temp = temp.next
        return None  # not found

    def delete(self, key):
        index = self._multiply_hash(key)
        temp = self.table[index]

        while temp:
            if temp.key == key:
                if temp.prev:
                    temp.prev.next = temp.next
                else:
                    self.table[index] = temp.next

                if temp.next:
                    temp.next.prev = temp.prev

                self.count -= 1

                if self.count <= self.size // 4 and self.size > 1:
                    self._resize(self.size // 2)
                return

            temp = temp.next

    def _resize(self, new_size):
        old_table = self.table
        self.table = [None] * new_size
        self.size = new_size
        self.count = 0

        for node in old_table:
            while node:
                self.insert(node.key, node.value)
                node = node.next

    def __str__(self):
        result = []
        for i in range(self.size):
            temp = self.table[i]
            while temp:
                result.append(f"({temp.key}: {temp.value})")
                temp = temp.next
        return " -> ".join(result)


if __name__ == "__main__":
    ht = HashTable()
    
    ht.insert(1, 10)
    ht.insert(2, 20)
    ht.insert(3, 30)
    ht.insert(4, 40)
    ht.insert(5, 50)
    
    print("Hash Table:", ht)
    
    print("Value for key 3:", ht.get(3))  # Should print 30
    ht.delete(3)
    print("Value for key 3 after deletion:", ht.get(3))  # Should print None

    print("Hash Table after deletion:", ht)
